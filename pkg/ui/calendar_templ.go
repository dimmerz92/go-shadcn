// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "strings"
import "github.com/dimmerz92/go-templ-lucide/icons"

type CalendarProps struct {
	ID               string // specifies the id attribute.
	Class            string // adds classes.
	templ.Attributes        // adds additional attributes.
}

// A date field component that allows users to enter and edit a date.
//
// Emits the following events:
//   - `.calendar`
//     emits the "change" event with detail.date as a Date object representing
//     the selected date and detail.trigger as the element that triggered the
//     event.
//
//   - `.calendar .calendar-display`
//     emits the "change" event with detail as a Date object representing the
//     current month and year to be displayed.
func Calendar(props CalendarProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var2 = []any{strings.TrimSpace("calendar " + props.Class)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.ID != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(props.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/calendar.templ`, Line: 26, Col: 16}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/calendar.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, props.Attributes)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "><div class=\"calendar-controls\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var5 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = icons.ChevronLeft(icons.IconProps{}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " <script")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if nonce := templ.GetNonce(ctx); nonce != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " nonce=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(nonce)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/calendar.templ`, Line: 39, Col: 19}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, ">\n\t\t\t\t\t((prev) => {\n\t\t\t\t\t\tprev.addEventListener(\"click\", () => {\n\t\t\t\t\t\t\tconst display = prev.nextElementSibling;\n\t\t\t\t\t\t\tconst currentDate = new Date(parseInt(display.getAttribute(\"data-month\")));\n\t\t\t\t\t\t\tconst prevDate = new Date(\n\t\t\t\t\t\t\t\tcurrentDate.getFullYear(),\n\t\t\t\t\t\t\t\tcurrentDate.getMonth() - 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdisplay.textContent = prevDate.toLocaleString(\n\t\t\t\t\t\t\t\t\"en-US\",\n\t\t\t\t\t\t\t\t{ month: \"long\", year: \"numeric\" },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdisplay.setAttribute(\"data-month\", prevDate.setHours(0, 0, 0, 0));\n\t\t\t\t\t\t\tdisplay.dispatchEvent(new CustomEvent(\"change\",\n\t\t\t\t\t\t\t\t{ detail: prevDate }\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t});\n\t\t\t\t\t})(document.currentScript.closest(\".calendar-control\"));\n\t\t\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Button(ButtonProps{
			Class:      "calendar-control outline secondary",
			Attributes: templ.Attributes{"aria-label": "Previous month"},
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var5), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<span class=\"calendar-display\"><script")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if nonce := templ.GetNonce(ctx); nonce != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, " nonce=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(nonce)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/calendar.templ`, Line: 65, Col: 19}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, ">\n\t\t\t\t\t((display) => {\n\t\t\t\t\t\tconst currentMonth = new Date();\n\t\t\t\t\t\tcurrentMonth.setDate(1);\n\t\t\t\t\t\tdisplay.textContent = currentMonth.toLocaleString(\n\t\t\t\t\t\t\t\"en-US\",\n\t\t\t\t\t\t\t{ month: \"long\", year: \"numeric\" },\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdisplay.setAttribute(\"data-month\", currentMonth.setHours(0, 0, 0 ,0));\n\t\t\t\t\t})(document.currentScript.closest(\".calendar-display\"));\n\t\t\t\t</script></span>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var8 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = icons.ChevronRight(icons.IconProps{}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, " <script")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if nonce := templ.GetNonce(ctx); nonce != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, " nonce=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(nonce)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/calendar.templ`, Line: 86, Col: 19}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, ">\n\t\t\t\t\t((next) => {\n\t\t\t\t\t\tnext.addEventListener(\"click\", () => {\n\t\t\t\t\t\t\tconst display = next.previousElementSibling;\n\t\t\t\t\t\t\tconst currentDate = new Date(parseInt(display.getAttribute(\"data-month\")));\n\t\t\t\t\t\t\tconst nextDate = new Date(\n\t\t\t\t\t\t\t\tcurrentDate.getFullYear(),\n\t\t\t\t\t\t\t\tcurrentDate.getMonth() + 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdisplay.textContent = nextDate.toLocaleString(\n\t\t\t\t\t\t\t\t\"en-US\",\n\t\t\t\t\t\t\t\t{ month: \"long\", year: \"numeric\" },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdisplay.setAttribute(\"data-month\", nextDate.setHours(0, 0, 0, 0));\n\t\t\t\t\t\t\tdisplay.dispatchEvent(new CustomEvent(\"change\",\n\t\t\t\t\t\t\t\t{ detail: nextDate }\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t});\n\t\t\t\t\t})(document.currentScript.closest(\".calendar-control\"));\n\t\t\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Button(ButtonProps{
			Class:      "calendar-control outline secondary",
			Attributes: templ.Attributes{"aria-label": "Next month"},
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var8), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "</div><table><thead><tr><th>Su</th><th>Mo</th><th>Tu</th><th>We</th><th>Th</th><th>Fr</th><th>Sa</th></tr></thead> <tbody class=\"calendar-body\"></tbody></table>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var10 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = renderCalendar().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = calendarRenderer.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var10), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "<script")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if nonce := templ.GetNonce(ctx); nonce != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, " nonce=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(nonce)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/calendar.templ`, Line: 129, Col: 17}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, ">\n\t\t\t((calendar) => {\n\t\t\t\tconst display = calendar.querySelector(\".calendar-display\")\n\t\t\t\tconst calendarBody = calendar.querySelector(\".calendar-body\");\n\t\t\t\trenderCalendar(display, calendarBody)\n\t\t\t\tdisplay.addEventListener(\"change\", () => {\n\t\t\t\t\trenderCalendar(display, calendarBody);\n\t\t\t\t});\n\t\t\t})(document.currentScript.closest(\".calendar\"));\n\t\t</script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var calendarRenderer = templ.NewOnceHandle()

func renderCalendar() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var12 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var12 == nil {
			templ_7745c5c3_Var12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "<script")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if nonce := templ.GetNonce(ctx); nonce != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, " nonce=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var13 string
			templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(nonce)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/calendar.templ`, Line: 149, Col: 16}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, ">\n\t\tfunction renderCalendar(display, calendarBody) {\n\t\t\tcalendarBody.innerHTML = \"\";\n\t\t\tconst selected = display.closest(\".calendar\").getAttribute(\"data-value\");\n\t\t\tconst today = new Date(new Date().setHours(0, 0, 0, 0));\n\t\t\tconst displayMonth = new Date(\n\t\t\t\tparseInt(display.getAttribute(\"data-month\")\n\t\t\t));\n\t\t\tconst dayOfWeek = displayMonth.getDay();\n\t\t\tconst daysInMonth = new Date(\n\t\t\t\tdisplayMonth.getFullYear(),\n\t\t\t\tdisplayMonth.getMonth() + 1,\n\t\t\t\t0\n\t\t\t).getDate();\n\t\t\tconst offset = dayOfWeek + daysInMonth;\n\t\t\tconst startOfCalendar = new Date(\n\t\t\t\tdisplayMonth.getFullYear(),\n\t\t\t\tdisplayMonth.getMonth(),\n\t\t\t\tdaysInMonth - offset + 1,\n\t\t\t).getDate();\n\n\t\t\tlet date;\n\t\t\tlet count = 0;\n\t\t\tfor (let i = 0; i < Math.ceil(offset / 7); i++) {\n\t\t\t\tconst row = document.createElement(\"tr\");\n\n\t\t\t\tfor (let j = 0; j < 7; j++) {\n\t\t\t\t\tconst cell = document.createElement(\"td\");\n\t\t\t\t\tif (count < dayOfWeek) {\n\t\t\t\t\t\tdate = new Date(\n\t\t\t\t\t\t\tdisplayMonth.getFullYear(),\n\t\t\t\t\t\t\tdisplayMonth.getMonth() - 1,\n\t\t\t\t\t\t\tstartOfCalendar + count++,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcell.classList.add(\"prev\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdate = new Date(\n\t\t\t\t\t\t\tdisplayMonth.getFullYear(),\n\t\t\t\t\t\t\tdisplayMonth.getMonth(),\n\t\t\t\t\t\t\tcount++ - dayOfWeek + 1,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (date.getMonth() > displayMonth.getMonth() ||\n\t\t\t\t\t\t\tdate.getFullYear() > displayMonth.getFullYear()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcell.classList.add(\"next\");\n\t\t\t\t\t\t} else if (date.getTime() === today.getTime()) {\n\t\t\t\t\t\t\tcell.classList.add(\"current\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcell.textContent = date.getDate();\n\t\t\t\t\tcell.setAttribute(\n\t\t\t\t\t\t\"data-value\",\n\t\t\t\t\t\tdate.toLocaleDateString(\"en-CA\"),\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\tif (selected && cell.getAttribute(\"data-value\") === selected) {\n\t\t\t\t\t\tcell.classList.add(\"selected\");\n\t\t\t\t\t}\n\n\t\t\t\t\tdisplay.closest(\".calendar\").addEventListener(\"change\", (e) => {\n\t\t\t\t\t\tif (e.detail.trigger !== cell) {\n\t\t\t\t\t\t\tcell.classList.remove(\"selected\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tcell.onclick = function() {\n\t\t\t\t\t\tthis.classList.add(\"selected\");\n\n\t\t\t\t\t\tdisplay.closest(\".calendar\").setAttribute(\n\t\t\t\t\t\t\t\"data-value\",\n\t\t\t\t\t\t\tthis.getAttribute(\"data-value\")\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdisplay.closest(\".calendar\").dispatchEvent(new CustomEvent(\n\t\t\t\t\t\t\t\"change\", {\n\t\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\t\tvalue: date,\n\t\t\t\t\t\t\t\t\ttrigger: cell,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\trow.appendChild(cell);\n\t\t\t\t}\n\t\t\t\tcalendarBody.appendChild(row);\n\t\t\t}\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
